
; Program:     Multiple_Byte_Key_Encryption.asm
; Description: his program demonstrates simple 
;		Symmetric-key Encryption using the XOR instruction with a multi-byte key entered by the user.
; Student:     Bryan Oliande
; Date Due:	   3/12/2015
; Class:       CSCI 241
; Instructor:  Mr. Ding

INCLUDE Irvine32.inc
KEY = 239     		; any value between 1-255
BUFMAX = 128     	; maximum buffer size

.data
prompt1  BYTE  "Enter the plain text: ",0
prompt2  BYTE  "Enter the encryption key: ",0
sEncrypt BYTE  "Cipher text:         ",0
sDecrypt BYTE  "Decrypted:           ",0

keyStr   BYTE   BUFMAX+1 DUP(0)
keySize  DWORD  ?
buffer   BYTE   BUFMAX+1 DUP(0)
bufSize  DWORD  ?

.code
main PROC
    mov edx,OFFSET prompt1  ; display buffer prompt
    mov ebx,OFFSET buffer   ; point to the buffer
    call InputTheString
    mov bufSize,eax         ; save the buffer length

    mov edx,OFFSET prompt2  ; display key prompt
    mov ebx,OFFSET keyStr   ; point to the key
    call InputTheString
    mov keySize,eax         ; save the key length

	call	TranslateBuffer	; encrypt the buffer
	mov	edx,OFFSET sEncrypt	; display encrypted message
	call	DisplayMessage
	call	TranslateBuffer  	; decrypt the buffer
	mov	edx,OFFSET sDecrypt	; display decrypted message
	call	DisplayMessage

	exit
main ENDP

;-----------------------------------------------------
InputTheString PROC
;
; Prompts user for a plaintext string. Saves the string 
; and its length.
; Receives: edx has buffer or key prompt, ebx has offset of buffer or key
; Returns: eax has the size of the string inputted
;-----------------------------------------------------
	call	WriteString ;display prompt in edx
	mov	ecx,BUFMAX		; maximum character count
	mov	edx,ebx ; point to the buffer
	call	ReadString         	; input the string
	call	Crlf
	ret
InputTheString ENDP

;-----------------------------------------------------
DisplayMessage PROC
;
; Displays the encrypted or decrypted message.
; Receives: EDX points to the message
; Returns:  nothing
;-----------------------------------------------------
	pushad
	call	WriteString
	mov	edx,OFFSET buffer	; display the buffer
	call	WriteString
	call	Crlf
	call	Crlf
	popad
	ret
DisplayMessage ENDP

;-----------------------------------------------------
TranslateBuffer PROC
;
; Translates the string by exclusive-ORing each
; byte with the encryption key byte.
; Receives: nothing
; Returns: nothing
;-----------------------------------------------------
	pushad
	mov	ecx,bufSize		; loop counter
	mov	esi,0			; index 0 in buffer
	mov edi,0			;index 0 in keyStr
	
	L1:
	mov al,keyStr[edi]
	xor buffer[esi],al
	inc	esi				; point to next byte
	inc edi				; move to next key byte

	cmp keyStr[edi],0	;if key is at NULL
	jne L3
	mov edi,0		;start keyStr over         
	L3:
	loop L1

	popad
	ret
TranslateBuffer ENDP
END main